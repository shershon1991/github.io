<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go标准包 on Learn Go</title>
    <link>https://shershon1991.github.io/tags/go%E6%A0%87%E5%87%86%E5%8C%85/</link>
    <description>Recent content in Go标准包 on Learn Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 24 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shershon1991.github.io/tags/go%E6%A0%87%E5%87%86%E5%8C%85/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go扩展包(二十四):testing</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/24-testing/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/24-testing/</guid>
      <description>1. 介绍 testing 包为Go 语言提供自动化测试的支持。通过 go test 命令来执行单元测试文件，单元测试文件命名格式为: xxx_test.go,在单元测试文件中,</description>
    </item>
    
    <item>
      <title>Go扩展包(二十):math</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/20-math/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/20-math/</guid>
      <description>1. 介绍 Go标准包math,提供了基本的数学常数和数学函数。 2. 常量 2.1 整数取值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const ( MaxInt8 = 1&amp;lt;&amp;lt;7 - 1 // int8最大值 MinInt8 = -1 &amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>Go扩展包(十八):encoding-json</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/18-encoding-json/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/18-encoding-json/</guid>
      <description>1. 介绍 Go的标准包 encoding/json实现了json对象的编码和解码。 这篇文章主要讲的是结构体中嵌套匿名字段时的序列化和反序列化，因结</description>
    </item>
    
    <item>
      <title>Go扩展包(十五):os</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/15-os/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/15-os/</guid>
      <description>1.介绍 os包中提供了操作系统函数的接口，是一个比较重要的包。它的作用主要是在服务器上进行系统的基本操作，如文件操作、目录操作、执行命令、信</description>
    </item>
    
    <item>
      <title>Go扩展包(十二):unicode</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/12-unicode/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/12-unicode/</guid>
      <description>1.介绍 unicode包提供了诸多处理rune字符相关功能的函数（比如区分字母和数字，或者是字母的大写和小写转换等) 2.判断函数 2.1 是否为空格</description>
    </item>
    
    <item>
      <title>Go扩展包(十一):sort</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/11-sort/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/11-sort/</guid>
      <description>1.介绍 sort包实现了四种基本排序算法：插入排序、归并排序、堆排序、快速排序。 但是这四种排序方法是不公开的，它们只能在 sort 包内部使用。sor</description>
    </item>
    
    <item>
      <title>Go扩展包(九):flag</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/9-flag/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/9-flag/</guid>
      <description>1.介绍 在 Go中，如果要接收命令行参数，需要使用 flag包进行解析。不同的参数类型可以通过不同的方法接收。 2.参数接受 2.1 接受方式 使用flag</description>
    </item>
    
    <item>
      <title>Go扩展包(八):sync</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/8-sync/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/8-sync/</guid>
      <description>1.介绍 sync包提供了互斥锁。除了Once和WaitGroup类型，其余多数适用于低水平的程序，多数情况下，高水平的同步使用channel</description>
    </item>
    
    <item>
      <title>Go扩展包(七):context(上下文)</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/7-context%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/7-context%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>1.什么是上下文? 从Go 1.7开始,标准库引入context(上下文)，他主要用来在goroutine之间传递上下文信息(同步信号、超时时间</description>
    </item>
    
    <item>
      <title>Go扩展包(六):bufio(有缓冲的IO)</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/6-bufio%E6%9C%89%E7%BC%93%E5%86%B2%E7%9A%84io/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/6-bufio%E6%9C%89%E7%BC%93%E5%86%B2%E7%9A%84io/</guid>
      <description>1.介绍 bufio包实现了有缓冲的I/O。它包装一个io.Reader或io.Writer接口对象，使用这个包可以大幅提高文件读写的效率。 1</description>
    </item>
    
    <item>
      <title>Go扩展包(五):ioutil(IO操作函数集)</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/5-ioutilio%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0%E9%9B%86/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/5-ioutilio%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0%E9%9B%86/</guid>
      <description>1.介绍 在Go语言中，io包主要声明的是对I/O操作的基本接口，而io/ioutil包则实现了对应的方法，方便我们直接使用。 2.方法列表 方法</description>
    </item>
    
    <item>
      <title>Go扩展包(四):fmt(格式化输出)</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/4-fmt%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/4-fmt%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</guid>
      <description>1.输出控制台 1.1 Printf Printf根据format参数生成格式化的字符串并写入标准输出。返回写入的字节数和遇到的任何错误。 1.format格式 动</description>
    </item>
    
    <item>
      <title>Go扩展包(三):time(时间包)</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/3-time%E6%97%B6%E9%97%B4%E5%8C%85/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/3-time%E6%97%B6%E9%97%B4%E5%8C%85/</guid>
      <description>1.获取时间 1.1 当前时间 1 2 3 4 5 6 7 8 9 10 11 12 13 14 unix := time.Now().Unix() fmt.Printf(&amp;#34;当前时间戳(单位秒): %v \n&amp;#34;,unix) nano := time.Now().UnixNano() fmt.Printf</description>
    </item>
    
    <item>
      <title>Go扩展包(二):strconv(字符串转换)</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/2-strconv%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/2-strconv%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/</guid>
      <description>1.转换成其他类型（Parse类函数） 1.1 转换成整型(Atoi) 1.语法 1 func Atoi(s string) (int, error) 2.使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;strconv&amp;#34; ) func main()</description>
    </item>
    
    <item>
      <title>Go扩展包(一):strings(字符串操作)</title>
      <link>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/1-strings%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/%E6%89%A9%E5%B1%95%E5%8C%85/1-strings%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid>
      <description>1.字符串查找 strings是Go内置的标准包,主要用于字符串查找、替换、比较等。常用方法如下: 1.1 方法列表 方法名 描述 Count(s, substr string)int 返回字符串s包含字</description>
    </item>
    
  </channel>
</rss>
