<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gin框架 on Learn Go</title>
    <link>https://shershon1991.github.io/tags/gin%E6%A1%86%E6%9E%B6/</link>
    <description>Recent content in Gin框架 on Learn Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 28 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://shershon1991.github.io/tags/gin%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gin集成(六):集成ElasticSearch</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/06-es/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/06-es/</guid>
      <description>1.介绍 ElasticSearch是一个分布式、可扩展、近实时的高性能搜索与数据分析引擎。在Go中经常使用的包有以下两个: 包 文档 Star 数量 olivere/elastic https://olivere.github.io/elastic/ 5.7k</description>
    </item>
    
    <item>
      <title>Gin集成(五):集成Redis操作库</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/05-redis/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/05-redis/</guid>
      <description>1.介绍 redis官网推荐使用redigo(https://github.com/gomodule/redigo)，截止到今天Github S</description>
    </item>
    
    <item>
      <title>Gin集成(四):集成JWT</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/04-jwt/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/04-jwt/</guid>
      <description>1. 介绍 JWT全称JSON Web Token是一种跨域认证解决方案，属于一个开放的标准，它规定了一种Token实现方式，目前多用于前后端分离项目和O</description>
    </item>
    
    <item>
      <title>Gin集成(三):集成全功能orm框架-gorm</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/03-gorm/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/03-gorm/</guid>
      <description>1. 介绍 gorm是一个使用Go语言编写的ORM框架。 它文档齐全，对开发者友好，支持主流数据库。具体使用可参考之前的文章Go常用包(十九):全功</description>
    </item>
    
    <item>
      <title>Gin集成(二):集成高性能日志zap</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/02-zap/</link>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/02-zap/</guid>
      <description>1.项目介绍 Gin框架学习使用,并实践常用包在Gin框架中的集成和使用。源码地址: https://github.com/shershon1991/gin-api-template.git 1.1 项目结构 1 2 3 4 5 6 7 8 9 10 11 12 ├── api # 接口 ├── config</description>
    </item>
    
    <item>
      <title>Gin集成(一):集成viper配置解析包</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/01-viper/</link>
      <pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/gin%E9%9B%86%E6%88%90/01-viper/</guid>
      <description>1.介绍 Viper是适用于Go应用程序（包括Twelve-Factor App）的完整配置解决方案。它被设计用于在应用程序中工作，并且可以处理</description>
    </item>
    
    <item>
      <title>Gin框架(十二):更多HTTP服务使用</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/12-%E6%9B%B4%E5%A4%9Ahttp%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/12-%E6%9B%B4%E5%A4%9Ahttp%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8/</guid>
      <description>1.静态文件服务 1.1 代码 1 2 3 4 5 6 7 8 9 10 11 package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main() { engine := gin.Default() // 静态图片 engine.Static(&amp;#34;/img&amp;#34;,&amp;#34;./public/img&amp;#34;) // 静态文件 engine.StaticFile(&amp;#34;/favicon.ico&amp;#34;,&amp;#34;./public/favicon.ico&amp;#34;) // 启动服务 _ = engine.Run() } 1.2 目录结构 1.3 请求示例 1 2 3 4 5 # 请</description>
    </item>
    
    <item>
      <title>Gin框架(十一):验证器(validator)</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/11-%E9%AA%8C%E8%AF%81%E5%99%A8validator/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/11-%E9%AA%8C%E8%AF%81%E5%99%A8validator/</guid>
      <description>1.介绍 validator是一个开源的验证器包，可以快速校验输入信息是否符合自定规则。目前Star 7.8k,源码地址: https://github.com/go-playground/validator 1.1 安装 1 go get github.com/go-playground/validator 1.2 引用</description>
    </item>
    
    <item>
      <title>Gin框架(十):日志使用(logrus&#43;lumberjack)</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/10-%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8logrus&#43;lumberjack/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/10-%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8logrus&#43;lumberjack/</guid>
      <description>1.框架自带 gin框架自带日志记录功能,通过fmt.Fprint和fmt.Fprintf来记录日志信息，默认是将日志写到终端,可以通过gin</description>
    </item>
    
    <item>
      <title>Gin框架(九):BasicAuth中间件使用</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/09-basicauth%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/09-basicauth%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BD%BF%E7%94%A8/</guid>
      <description>1.什么是BasicAuth? Basic Auth是一种开放平台认证方式，简单的说就是需要你输入用户名和密码才能继续访问。 2.在单路由中使用 ​ 如果需要</description>
    </item>
    
    <item>
      <title>Gin框架(八):中间件</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/08-%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/08-%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>中间件（英语：Middleware），又译中间件、中介层，是一类提供系统软件和应用软件之间连接、便于软件各部件之间的沟通的软件，应用软件可以</description>
    </item>
    
    <item>
      <title>Gin框架(七):文件上传</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/07-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/07-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</guid>
      <description>1.介绍 在Gin框架中已经支持文件上传，包括单文件上传和多文件上传。 2. 单文件上传 在Gin框架中可以通过FormFile(&amp;quot;para</description>
    </item>
    
    <item>
      <title>Gin框架(六):参数绑定</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/06-%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/06-%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</guid>
      <description>1.介绍 在Gin框架中参数不但能通过指定key接收,也可以直接绑定到结构体中,本篇主要讲解怎么直接绑定到结构体中,若要查看通过指定key接收</description>
    </item>
    
    <item>
      <title>Gin框架(五):参数接收</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/05-%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/05-%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6/</guid>
      <description>1.路由参数 1.1 Param 当注册路由格式为:/path/:a/:b 时，:x指的就是路由参数，可以直接通过Param(&amp;quot;x&amp;quot;)获取值</description>
    </item>
    
    <item>
      <title>Gin框架(四):路由组</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/04-%E8%B7%AF%E7%94%B1%E7%BB%84/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/04-%E8%B7%AF%E7%94%B1%E7%BB%84/</guid>
      <description>1.什么是路由组? 从字面意思理解,路由组指的就是一组路由。那么什么样的路由可以归类到一组呢？在实际使用中，比较常见的场景的是根据版本分组。比</description>
    </item>
    
    <item>
      <title>Gin框架(三):路由初使用</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/03-%E8%B7%AF%E7%94%B1%E5%88%9D%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/03-%E8%B7%AF%E7%94%B1%E5%88%9D%E4%BD%BF%E7%94%A8/</guid>
      <description>1.介绍 Gin框架的路由功能是基于httprouter(https://github.com/julienschmidt/httproute</description>
    </item>
    
    <item>
      <title>Gin框架(二):启动流程分析</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/02-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/02-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>1.启动服务 1.1 服务源码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main // 引入gin框架 import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main() { // 创建一个默认的路由引擎 engine := gin.Default() // 注册Get路由 engine.GET(&amp;#34;/&amp;#34;, func(ctx *gin.Context) { ctx.JSON(200,gin.H{ &amp;</description>
    </item>
    
    <item>
      <title>Gin框架(一):快速入门</title>
      <link>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/01-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/01-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>1.什么是Gin Gin 是一个用Go (Golang)编写的 开源web 框架。 目前在GitHub Start 47.4K, 它是一个类似于 martini 但拥有更好性能的 API 框架，路由解析由</description>
    </item>
    
  </channel>
</rss>
