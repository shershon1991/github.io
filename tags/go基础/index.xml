<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go基础 on 小山的博客</title>
    <link>https://shershon1991.github.io/tags/go%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Go基础 on 小山的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 27 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shershon1991.github.io/tags/go%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go学习(二十七):反射使用</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/27-%E5%8F%8D%E5%B0%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/27-%E5%8F%8D%E5%B0%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1.介绍 Go语言实现了反射，所谓反射就是动态运行时的状态。我们一般用到的包是reflect包，reflect 实现了运行时的反射能力，能够让程</description>
    </item>
    
    <item>
      <title>Go学习(二十六):Md5-Sha1-Base64</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/26-md5-sha1-base64/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/26-md5-sha1-base64/</guid>
      <description>1.生成Md5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( &amp;#34;crypto/md5&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; ) func main() { str := &amp;#34;Hello Word&amp;#34; // 方法一 sum := md5.Sum([]byte(str)) // 转成16进制 md51 := fmt.Sprintf(&amp;#34;%x&amp;#34;, sum)</description>
    </item>
    
    <item>
      <title>Go学习(二十五):操作数据库-MYSQL</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/25-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93-mysql/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/25-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93-mysql/</guid>
      <description>1.介绍 Go官方提供了database包，database包下有sql/driver。该包用来定义操作数据库的接口，这保证了无论使用哪种数据</description>
    </item>
    
    <item>
      <title>Go学习(二十四):文件操作</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/24-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/24-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>1.介绍 在Go语言中，文件操作的大多数函数都在os包里面，文件的信息包括文件名、文件大小、修改权限、修改时间等。 1.1 文件接口属性(FileIn</description>
    </item>
    
    <item>
      <title>Go学习(二十三):JSON使用</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/23-json%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/23-json%E4%BD%BF%E7%94%A8/</guid>
      <description>1.Map转JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { // map里面 map1 := map[string]string { &amp;#34;n</description>
    </item>
    
    <item>
      <title>Go学习(二十二):Web开发-HTTP客户端的实现</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/22-web%E5%BC%80%E5%8F%91-http%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/22-web%E5%BC%80%E5%8F%91-http%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>1.怎么实现HTTP协议客户端? Go语言标准库内置了net/http包，涵盖了HTTP客户端和服务端具体的实现方式。内置的net/http包</description>
    </item>
    
    <item>
      <title>Go学习(二十一):Web开发-HTTP服务端接收参数的几种方式</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/21-web%E5%BC%80%E5%8F%91-http%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/21-web%E5%BC%80%E5%8F%91-http%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>1.获取GET参数 1.1 方法列表 方法名 描述 (r *Request) ParseForm() error 判断是否解析传参时出错 (r *Request) FormValue(key string) string 接收指定key的参数值 1.2 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>Go学习(二十):Web开发-HTTP服务端启动的几种方式</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/20-web%E5%BC%80%E5%8F%91-http%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%AF%E5%8A%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/20-web%E5%BC%80%E5%8F%91-http%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%AF%E5%8A%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>1. 怎么启动Web服务？ Go语言标准库内置的net/http包，可以实现HTTP服务端。实现HTTP服务端就是能够启动Web服务，相当于搭建起</description>
    </item>
    
    <item>
      <title>Go学习(十九):并发编程-sync包</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/19-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-sync%E5%8C%85/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/19-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-sync%E5%8C%85/</guid>
      <description>1.介绍 sync包提供了互斥锁。除了Once和WaitGroup类型，其余多数适用于低水平的程序，多数情况下，高水平的同步使用channel</description>
    </item>
    
    <item>
      <title>Go学习(十八):并发编程-select和通道</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/18-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-select%E5%92%8C%E9%80%9A%E9%81%93/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/18-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-select%E5%92%8C%E9%80%9A%E9%81%93/</guid>
      <description>1.什么是select？ select语句的机制有点像switch语句，不同的是，select会随机挑选一个可通信的case来执行，如果所有c</description>
    </item>
    
    <item>
      <title>Go学习(十七):并发编程-通道</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/17-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E9%80%9A%E9%81%93/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/17-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E9%80%9A%E9%81%93/</guid>
      <description>1.什么是Channel? channel即Go的通道，是协程之间的通信机制。一个channel是一条通信管道，它可以让一个协程通过它给另一个</description>
    </item>
    
    <item>
      <title>Go学习(十六):并发编程-协程</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/16-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/16-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%8D%8F%E7%A8%8B/</guid>
      <description>1.什么是协程? 协程又称为微线程，是一种比线程更加轻量级的存在。正如一个进程可以拥有多个线程，一个线程也可以拥有多个协程。 协程是编译器级的，</description>
    </item>
    
    <item>
      <title>Go学习(十五):异常处理</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/15-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/15-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>1.介绍 错误是指程序中出现不正常的情况，从而导致程序无法正常运行。Go语言中没有try...catch来捕获错误，而是通过defer+rec</description>
    </item>
    
    <item>
      <title>Go学习(十四):面向对象-接口(interface)</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%8E%A5%E5%8F%A3/</guid>
      <description>虽然Go语言没有继承和多态，但是Go语言可以通过匿名字段实现继承，通过接口实现多态。 1.介绍 1.1 概念 在Go语言中，接口是一组方法签名。接口指定</description>
    </item>
    
    <item>
      <title>Go学习(十三):面向对象-方法(method)</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/12-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/12-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>Go没有沿袭传统面向对象编程中的诸多概念，也没有提供类(class)，但是它提供了结构体(struct)，方法(method)可以在结构体上</description>
    </item>
    
    <item>
      <title>Go学习(十一):映射(map)</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/11-%E6%98%A0%E5%B0%84map/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/11-%E6%98%A0%E5%B0%84map/</guid>
      <description>1.定义 map是一种集合，可以像遍历数组或切片那样去遍历它。因为map是由Hash表实现的，所以对map的读取顺序不固定。 1.1 注意事项 map是</description>
    </item>
    
    <item>
      <title>Go学习(十):切片(slice)</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/10-%E5%88%87%E7%89%87/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/10-%E5%88%87%E7%89%87/</guid>
      <description>1.切片的概念 Go语言中数组的长度不可改变，但在很多应用场景中，在初始定义数组时，数组的长度并不可预知，这样的序列集合无法满足要求。Go中提</description>
    </item>
    
    <item>
      <title>Go学习(九):数组使用</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/9-%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/9-%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1.数组的概念 数组是相同类型的一组数据构成的长度固定的序列，其中数据类型包含了基本数据类型、复合数据类型和自定义类型。因为数组的内存是一段连</description>
    </item>
    
    <item>
      <title>Go学习(八):指针</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/8-%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/8-%E6%8C%87%E9%92%88/</guid>
      <description>1.什么是指针？ 指针是存储另一个变量的内存地址的变量。变量是一种使用方便的占位符，变量都指向计算机的内存地址。一个指针变量可以指向任何一个值</description>
    </item>
    
    <item>
      <title>Go学习(七):闭包使用</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/7-%E9%97%AD%E5%8C%85/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/7-%E9%97%AD%E5%8C%85/</guid>
      <description>1. 什么是闭包 闭包是由函数和与其相关的引用环境组合而成的实体在实现深约束时，需要创建一个能显式表示引用环境的东西，并将它与相关的子程序捆绑在一</description>
    </item>
    
    <item>
      <title>Go学习(六):函数使用</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/6-%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/6-%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</guid>
      <description>1.函数申明 1.1 声明语法 1 2 3 4 5 func funcName( param type ) (output1 type1, output2 type2) { //这里是处理逻辑代码 //返回多个值 return value1, value2 } 1.2 语法解析 func: 函数关键字, funcName: 指函数名，在同一个</description>
    </item>
    
    <item>
      <title>Go学习(五):流程控制</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/5-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/5-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>1.条件判断(if) 1.1 if 1.语法结构 1 2 3 if 布尔表达式 { // 布尔表达式为true时执行 } 2. 使用 1 2 3 4 a := 10 if a &amp;gt; 3{ fmt.Println(&amp;#34;a &amp;gt; 3 为true&amp;#34;</description>
    </item>
    
    <item>
      <title>Go学习(四):数据类型</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>1.类型介绍 在Go语言中，有基本数据类型（原生数据类型）和复合数据类型（派生数据类型）。 2.值类型 2.1 整型 整型分两大类： 有符号整型：int8、</description>
    </item>
    
    <item>
      <title>Go学习(三):变量使用</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/3-%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/3-%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/</guid>
      <description>1.变量分类 变量的本质是计算机分配的一小块内存，专门用于存放指定数据，在程序运行过程中该数值可以发生改变；当程序运行结束，存放该数据的内存就</description>
    </item>
    
    <item>
      <title>Go学习(二):程序组成结构及规范说明</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/2-%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/2-%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</guid>
      <description>1. 程序示例 以实际代码进行讲解: 1 2 3 4 5 6 7 8 9 10 11 12 package main // 这是引入包 import &amp;#34;fmt&amp;#34; // 入口函数 func main() { // 定义变量 str := &amp;#34;hello word&amp;#34; // 输出语句 fmt.Println(str) } 2. 程序组成 2.1 包名:</description>
    </item>
    
    <item>
      <title>Go学习(一):Mac环境下安装配置</title>
      <link>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/1-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shershon1991.github.io/post/godoc/%E5%9F%BA%E7%A1%80%E7%AF%87/1-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>1.安装 下载地址（https://golang.org/dl/） 下载之后，双击安装； 2.验证 2.1 查看版本 1 2 3 # 查看版本 ➜ ~ go version go version go1.15.5 darwin/amd64 2.2 查看</description>
    </item>
    
  </channel>
</rss>
