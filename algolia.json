[{"content":"1. 介绍 gRPC 中的截取器，类似中间件( middleware )的功能，可以做一些前置校验的工作，比如登陆验证、日志记录、异常捕获等。 2. 流程梳理 gRPC 中的 grpc.UnaryInterceptor 和 grpc.StreamInterceptor 分别对普通方","lvl0":"RPC编程(六):gRPC中的截取器","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"7b6c5d7713120cfbbee25f151f673f61","tags":["Go进阶","RPC"],"url":"https://shershon1991.github.io/post/%E8%BF%9B%E9%98%B6%E7%AF%87/rpc/06-grpc%E4%B8%AD%E7%9A%84%E6%88%AA%E5%8F%96%E5%99%A8/"},{"content":"1.介绍 gRPC 为每个 gRPC 方法调用提供了 token 认证支持，可以基于用户传入的 token 判断用户是否登录、以及权限\u0026hellip;，实现 token 认证的前提是，需要定义一个","lvl0":"RPC编程(五):gRPC中的token认证","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"4346c2b120fc499d1a2f4934d3ea89f5","tags":["Go进阶","RPC"],"url":"https://shershon1991.github.io/post/%E8%BF%9B%E9%98%B6%E7%AF%87/rpc/05-grpc%E4%B8%AD%E7%9A%84token%E8%AE%A4%E8%AF%81/"},{"content":"1.介绍 ProtoBuf 是 Protocol Buffers 的简称，它是Google开发的一种数据描述语言，于2008年开源。 ProtoBuf 刚开源时的定位类似于 XML、JSON 等数据描述语言，通过","lvl0":"RPC编程(四):protobuf语法学习","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c61b212b60286de1563dad9d825fb19f","tags":["Go进阶","RPC"],"url":"https://shershon1991.github.io/post/%E8%BF%9B%E9%98%B6%E7%AF%87/rpc/04-protobuf%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"content":"1.什么是gRPC gRPC 是一个高性能、开源、通用的 RPC 框架，由 Google 推出，基于 HTTP2 协议标准设计开发，默认采用 Protocol Buffers 数据序列化协议，支持多种开发语言。 gRPC 提供","lvl0":"RPC编程(三):gRPC快速入门","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"6225a66aa62ec1ac3d51909578cbc201","tags":["Go进阶","RPC"],"url":"https://shershon1991.github.io/post/%E8%BF%9B%E9%98%B6%E7%AF%87/rpc/03-grpc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"content":"1.介绍 ElasticSearch是一个分布式、可扩展、近实时的高性能搜索与数据分析引擎。在Go中经常使用的包有以下两个: 包 文档 Star 数量 olivere/elastic https://olivere.github.io/elastic/ 5.7k","lvl0":"Gin集成(六):集成ElasticSearch","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"e1808ba8042c71ee9b4e96a428bf3f30","tags":["Gin集成"],"url":"https://shershon1991.github.io/post/gin%E9%9B%86%E6%88%90/06-es/"},{"content":"1.介绍 redis官网推荐使用redigo(https://github.com/gomodule/redigo)，截止到今天Github S","lvl0":"Gin集成(五):集成Redis操作库","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"e6737fe42b32a913d0733357a96dc84a","tags":["Gin集成"],"url":"https://shershon1991.github.io/post/gin%E9%9B%86%E6%88%90/05-redis/"},{"content":"1. 介绍 JWT全称JSON Web Token是一种跨域认证解决方案，属于一个开放的标准，它规定了一种Token实现方式，目前多用于前后端分离项目和O","lvl0":"Gin集成(四):集成JWT","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"d53c2e30f1ae0e034cc80297ed802388","tags":["Gin集成"],"url":"https://shershon1991.github.io/post/gin%E9%9B%86%E6%88%90/04-jwt/"},{"content":"1. 介绍 gorm是一个使用Go语言编写的ORM框架。 它文档齐全，对开发者友好，支持主流数据库。具体使用可参考之前的文章Go常用包(十九):全功","lvl0":"Gin集成(三):集成全功能orm框架-gorm","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"774e885a767fdd066d35adc263bb8f9d","tags":["Gin集成"],"url":"https://shershon1991.github.io/post/gin%E9%9B%86%E6%88%90/03-gorm/"},{"content":"1.项目介绍 Gin框架学习使用,并实践常用包在Gin框架中的集成和使用。源码地址: https://github.com/shershon1991/gin-api-template.git 1.1 项目结构 1 2 3 4 5 6 7 8 9 10 11 12 ├── api # 接口 ├── config","lvl0":"Gin集成(二):集成高性能日志zap","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"542acad1f43235106f6c01edb4a093e9","tags":["Gin集成"],"url":"https://shershon1991.github.io/post/gin%E9%9B%86%E6%88%90/02-zap/"},{"content":"1.介绍 Viper是适用于Go应用程序（包括Twelve-Factor App）的完整配置解决方案。它被设计用于在应用程序中工作，并且可以处理","lvl0":"Gin集成(一):集成viper配置解析包","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"ba06bf3b0e0f0703d29c89ab2d5e7f9e","tags":["Gin集成"],"url":"https://shershon1991.github.io/post/gin%E9%9B%86%E6%88%90/01-viper/"},{"content":"1.静态文件服务 1.1 代码 1 2 3 4 5 6 7 8 9 10 11 package main import \u0026#34;github.com/gin-gonic/gin\u0026#34; func main() { engine := gin.Default() // 静态图片 engine.Static(\u0026#34;/img\u0026#34;,\u0026#34;./public/img\u0026#34;) // 静态文件 engine.StaticFile(\u0026#34;/favicon.ico\u0026#34;,\u0026#34;./public/favicon.ico\u0026#34;) // 启动服务 _ = engine.Run() } 1.2 目录结构 1.3 请求示例 1 2 3 4 5 # 请","lvl0":"Gin框架(十二):更多HTTP服务使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"22986d65abf1381a45ed3ab2baa3b654","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/12-%E6%9B%B4%E5%A4%9Ahttp%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8/"},{"content":"1.介绍 validator是一个开源的验证器包，可以快速校验输入信息是否符合自定规则。目前Star 7.8k,源码地址: https://github.com/go-playground/validator 1.1 安装 1 go get github.com/go-playground/validator 1.2 引用","lvl0":"Gin框架(十一):验证器(validator)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"f57b2719c5fab1a3e925b3962982b494","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/11-%E9%AA%8C%E8%AF%81%E5%99%A8validator/"},{"content":"1.框架自带 gin框架自带日志记录功能,通过fmt.Fprint和fmt.Fprintf来记录日志信息，默认是将日志写到终端,可以通过gin","lvl0":"Gin框架(十):日志使用(logrus+lumberjack)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"5ea16c1bbb2ad05b7d00386c1cf7737f","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/10-%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8logrus+lumberjack/"},{"content":"1.什么是BasicAuth? Basic Auth是一种开放平台认证方式，简单的说就是需要你输入用户名和密码才能继续访问。 2.在单路由中使用 ​ 如果需要","lvl0":"Gin框架(九):BasicAuth中间件使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"4a7ef04c64b02bdcfa326daf011597f1","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/09-basicauth%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"content":"中间件（英语：Middleware），又译中间件、中介层，是一类提供系统软件和应用软件之间连接、便于软件各部件之间的沟通的软件，应用软件可以","lvl0":"Gin框架(八):中间件","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"e4cfc5aae87a0ee068a093bd4ea3d6dc","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/08-%E4%B8%AD%E9%97%B4%E4%BB%B6/"},{"content":"1.介绍 在Gin框架中已经支持文件上传，包括单文件上传和多文件上传。 2. 单文件上传 在Gin框架中可以通过FormFile(\u0026quot;para","lvl0":"Gin框架(七):文件上传","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c610125b75832d90a477efe777b58415","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/07-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"content":"1.介绍 在Gin框架中参数不但能通过指定key接收,也可以直接绑定到结构体中,本篇主要讲解怎么直接绑定到结构体中,若要查看通过指定key接收","lvl0":"Gin框架(六):参数绑定","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"3c2ec6fef1ec7d102db339df82bdeec8","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/06-%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/"},{"content":"1.路由参数 1.1 Param 当注册路由格式为:/path/:a/:b 时，:x指的就是路由参数，可以直接通过Param(\u0026quot;x\u0026quot;)获取值","lvl0":"Gin框架(五):参数接收","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"256a27abaaae95e1d60395d7a393392b","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/05-%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6/"},{"content":"1.什么是路由组? 从字面意思理解,路由组指的就是一组路由。那么什么样的路由可以归类到一组呢？在实际使用中，比较常见的场景的是根据版本分组。比","lvl0":"Gin框架(四):路由组","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c1f54acf9d62dedecbd3ee1d20682e7e","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/04-%E8%B7%AF%E7%94%B1%E7%BB%84/"},{"content":"1.介绍 Gin框架的路由功能是基于httprouter(https://github.com/julienschmidt/httproute","lvl0":"Gin框架(三):路由初使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"65b6c70af6d233db55db44f93d0e5cd2","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/03-%E8%B7%AF%E7%94%B1%E5%88%9D%E4%BD%BF%E7%94%A8/"},{"content":"1.启动服务 1.1 服务源码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main // 引入gin框架 import \u0026#34;github.com/gin-gonic/gin\u0026#34; func main() { // 创建一个默认的路由引擎 engine := gin.Default() // 注册Get路由 engine.GET(\u0026#34;/\u0026#34;, func(ctx *gin.Context) { ctx.JSON(200,gin.H{ \u0026","lvl0":"Gin框架(二):启动流程分析","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"98f8c6d3ee052bb9dbb7f06ecd303b2f","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/02-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"},{"content":"1.什么是Gin Gin 是一个用Go (Golang)编写的 开源web 框架。 目前在GitHub Start 47.4K, 它是一个类似于 martini 但拥有更好性能的 API 框架，路由解析由","lvl0":"Gin框架(一):快速入门","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"135b8d4e39b80099e57573937a47ef92","tags":["Gin框架"],"url":"https://shershon1991.github.io/post/gin%E6%A1%86%E6%9E%B6/01-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"content":"1.项目目录 1 2 3 4 5 6 7 8 9 10 ├── Dockerfile # dockerFile文件 ├── config-dev.yaml # dev环境配置文件 ├── config-local.yaml # 本地测试文件 ├── docker-compose.yaml # docker-","lvl0":"基金分析系统(六):通过docker-compose项目部署","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"df091222c58fb204c6ae25a25642c09e","tags":["Go实战"],"url":"https://shershon1991.github.io/post/%E9%A1%B9%E7%9B%AE%E7%AF%87/%E7%88%AC%E8%99%AB/6-docker-push/"},{"content":"1. 爬取流程 2. 准备工作 2.1 分页网页 @注意：这次爬取的网页数据是通过ajax加载，所以不能直接使用OnHtml抓取。 2.2 编写结构体 1 2 3 4 5 6 7 8 9","lvl0":"基金分析系统(五):爬取基金持仓信息","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"116a8e801f1167642e5b910628a13c3c","tags":["Go实战"],"url":"https://shershon1991.github.io/post/%E9%A1%B9%E7%9B%AE%E7%AF%87/%E7%88%AC%E8%99%AB/5-fund-stock/"},{"content":"1. 爬取逻辑流程 2. 准备工作 2.1 分析网页 2.2 编写结构体 根据上面的网页分析，可以根据div[class='txt_cont']选中table，然后根据","lvl0":"基金分析系统(四):爬取基金详情信息","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"71225b96b80cf7c32ae21f42bdd3fc07","tags":["Go实战"],"url":"https://shershon1991.github.io/post/%E9%A1%B9%E7%9B%AE%E7%AF%87/%E7%88%AC%E8%99%AB/4-fund-detail/"},{"content":"1.流程介绍 2.页面分析 3. 爬虫脚本 3.1 编写结构体 代码文件位置：service/crawl/fund/top_crawl.go 1 2 3 4 5 6 7 8 9","lvl0":"基金分析系统(三):爬取基金收益榜单","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"bbd510c00a04b61731b409de77c5aa4f","tags":["Go实战"],"url":"https://shershon1991.github.io/post/%E9%A1%B9%E7%9B%AE%E7%AF%87/%E7%88%AC%E8%99%AB/3-fund-top/"},{"content":"1. 介绍 数据模型指的是和表结构一一对应的结构体，通过编写结构体可通过迁移直接创建表结构,后续作为对表的增删改查的参数。 2. 用户模型 2.1 用户表 文件：","lvl0":"基金分析系统(二):通过数据模型建表","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"4f877e6c63b7684f04bd180f996d7d8a","tags":["Go实战"],"url":"https://shershon1991.github.io/post/%E9%A1%B9%E7%9B%AE%E7%AF%87/%E7%88%AC%E8%99%AB/2-database/"},{"content":"1. 项目介绍 使用Go开发《基金数据分析系统》，项目系统框架是基于gin-api-template的基础上做二次开发,该系统计划完成功能，主要有","lvl0":"基金分析系统(一):项目介绍","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"0137790a696bfd0eaddb1fd6c1b07152","tags":["Go实战"],"url":"https://shershon1991.github.io/post/%E9%A1%B9%E7%9B%AE%E7%AF%87/%E7%88%AC%E8%99%AB/1-desc/"},{"content":"1. 介绍 Go语言标准包(net/rpc)已经提供了对RPC的支持，而且支持三个级别的RPC：TCP、HTTP和JSONRPC。但Go语言的RP","lvl0":"RPC编程(二):快速入门使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"3e446acf33680fbf88f803c32e19c86d","tags":["Go进阶","RPC"],"url":"https://shershon1991.github.io/post/%E8%BF%9B%E9%98%B6%E7%AF%87/rpc/02-use-rpc/"},{"content":"1. 什么是RPC RPC（Remote Procedure Call，远程过程调用）是一种进程间的通信方式，它是一种技术思想(概念),而不是规范，它允许程序调用另一","lvl0":"RPC编程(一):初步了解RPC","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"2c3853c4f4fb55ab760eb55c7f5c5782","tags":["Go进阶","RPC"],"url":"https://shershon1991.github.io/post/%E8%BF%9B%E9%98%B6%E7%AF%87/rpc/01-understand/"},{"content":"1.介绍 Elasticsearch是一个分布式、可扩展、近实时的高性能搜索与数据分析引擎。在Go中经常使用的包有以下两个: 包 文档 Star 数量 olivere/elastic https://olivere.github.io/elastic/ 5.7k","lvl0":"框架开发(五):框架开发-集成ElasticSearch","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"98f2ce00b496b7149705005e6ee44aa4","tags":["框架开发"],"url":"https://shershon1991.github.io/post/%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91/5-%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91-%E9%9B%86%E6%88%90elasticsearch/"},{"content":"1.介绍 logrus是目前 Github 上 star 数量最多的日志库,截止今天star数量为17.3k 。logrus功能强大,性能高效,而且具有高度灵活性,提供","lvl0":"框架开发(四):框架开发-集成日志Logrus","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"d9fabae992c947efdb74f8ba5fd21e99","tags":["框架开发"],"url":"https://shershon1991.github.io/post/%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91/4-%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91-%E9%9B%86%E6%88%90%E6%97%A5%E5%BF%97logrus/"},{"content":"1.客户端介绍 redis官网推荐使用redigo(https://github.com/gomodule/redigo)，截止到今天Gith","lvl0":"框架开发(三):框架开发-集成Redis","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"d671376f19ffe2d5e76c0bb3dc0d917d","tags":["框架开发"],"url":"https://shershon1991.github.io/post/%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91/3-%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91-%E9%9B%86%E6%88%90redis/"},{"content":"1.安装 1 2 go get -u gorm.io/gorm go get -u gorm.io/driver/mysql 2.配置相关 2.1 编写配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [mysql] host=127.0.01 port=3306 database=test userName=root password=root charset=utf8mb4 # 表前缀 table_pre=app_ # 设置闲置的","lvl0":"框架开发(二):框架开发-集成Gorm","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"4dffb2bfaf4c46b8b0188ccc230630fa","tags":["框架开发"],"url":"https://shershon1991.github.io/post/%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91/2-%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91-%E9%9B%86%E6%88%90gorm/"},{"content":"1.背景介绍 使用Go开发Web API框架，验证学习成果。在实践中学习。 2.目录介绍 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ├── README.md","lvl0":"框架开发(一):框架开发-目录介绍和路由设计","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"a1af41b0f2f1da147f996955e9d2f8f1","tags":["框架开发"],"url":"https://shershon1991.github.io/post/%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91/1-%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91-%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E8%B7%AF%E7%94%B1%E8%AE%BE%E8%AE%A1/"},{"content":"1. 介绍 json-iterator是一款快且灵活的JSON解析器,不但100%兼容标准库encoding/json,而且比其更快。虽然官网说比","lvl0":"Go标准包(三十三):jsoniter","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"b7a70f0bf42bf4286be8b1d10ab0a931","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/33-jsoniter/"},{"content":"1. 介绍 Go-funk 是基于反射(reflect )实现的一个现代Go工具库，封装了对slice/map/struct/string等的操作。 2. 下载 1 2 3 4","lvl0":"Go标准包(三十二):go-funk","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"b484173a4fd8f09105c9ba771956bdf6","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/32-go-funk/"},{"content":"1. trace说明 在pprof的分析中，能够知道一段时间内的CPU占用、内存分配、协程堆栈信息。这些信息都是一段时间内数据的汇总，但是它们并没","lvl0":"Go标准包(三十一):trace","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"aac6d9bd1d15a883a086e1c114702d9c","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/31-trace/"},{"content":"1. 调用图说明 1.1 示例图 1.2 节点颜色 红色代表累计值cum为正，并且很大； 绿色代表累计值cum为负，并且很大； 灰色代表累计值cum可以忽略不计。 1.3 节","lvl0":"Go标准包(三十):pprof-2","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"5913ee323195178cdc89d1d0bcd94325","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/30-pprof-2/"},{"content":"1. 介绍 Go语言中的pprof指对于指标或特征的分析（Profiling），通过分析不仅可以查找到程序中的错误（内存泄漏、race冲突、协程泄","lvl0":"Go标准包(二十九):pprof","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"081bfe4f9daf9691711cd5d9c8303dbc","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/29-pprof/"},{"content":"1. 介绍 cobra是一个用来构建现代CLI工具的库。相比flag标准库，它提供更多方便的特性和功能。Cobra 由 Go 项目成员和 hugo 作者 spf13 创建，已经","lvl0":"Go标准包(二十八):cobra","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"eec99384fc72f6d74d8d3756f1878286","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/28-cobra/"},{"content":"1.介绍 在Linux中，通过crontab命令使任务在约定的时间执行已经计划好的工作，而Go由于语言的特性，不适合直接使用crontab来管","lvl0":"Go标准包(二十七):cron","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"b9fe9fec2ab294ab42fc20604a149d0e","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/27-cron/"},{"content":"1.介绍 Colly是Golang世界中最知名的Web爬虫框架,它提供简洁的 API，拥有强劲的性能、可以自动处理 cookie\u0026amp;sess","lvl0":"Go标准包(二十六):colly","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"3f412086d48a66bff2d478b77840e58b","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/26-colly/"},{"content":"1.介绍 Elasticsearch（ES）是一个基于Lucene构建的开源、分布式、RESTful接口的全文搜索引擎。Elasticsear","lvl0":"Go标准包(二十五):es","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"3e897a094863c0431fd3bc79f18b7fb1","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/25-es/"},{"content":"1. 介绍 testing 包为Go 语言提供自动化测试的支持。通过 go test 命令来执行单元测试文件，单元测试文件命名格式为: xxx_test.go,在单元测试文件中,","lvl0":"Go标准包(二十四):testing","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"3f870ed955a6a97666c4a4d3a2312b88","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/24-testing/"},{"content":"1. 介绍 redis官网推荐使用redigo(https://github.com/gomodule/redigo)，截止到今天Github St","lvl0":"Go标准包(二十三):go-redis","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"4d77a9362d21d8961404816971d2bc7e","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/23-go-redis/"},{"content":"1. 介绍 JWT全称JSON Web Token是一种跨域认证解决方案，属于一个开放的标准，它规定了一种Token实现方式，目前多用于前后端分离项目和O","lvl0":"Go标准包(二十二):jwt-go","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c05044a0b67d90a8c76454c85275c2db","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/22-jwt-go/"},{"content":"1. 介绍 1. 1 什么是Excelize Excelize 是 Go 语言编写的用于操作 Office Excel 文档基础库，基于 ECMA-376，ISO/IEC 29500 国际标准。可以使用它来读取、写","lvl0":"Go标准包(二十一):excel","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"1a616232cfb3de1c82de01c6798bfcca","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/21-excel/"},{"content":"1. 介绍 Go标准包math,提供了基本的数学常数和数学函数。 2. 常量 2.1 整数取值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const ( MaxInt8 = 1\u0026lt;\u0026lt;7 - 1 // int8最大值 MinInt8 = -1 \u0026lt;\u0026lt;","lvl0":"Go标准包(二十):math","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"4212a8d8e6ffb142e92ec38d89e3e69c","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/20-math/"},{"content":"1. 介绍 gorm是一个使用Go语言编写的ORM框架。 它文档齐全，对开发者友好，支持主流数据库。官方中文文档 https://gorm.io/zh_CN/docs/index.html 2. 安装 1 2 go get -u gorm.io/gorm go get -u gorm.io/driver/sqlite 3. 连接M","lvl0":"Go标准包(十九):gorm","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"d6ba3e2bf5519b51bdf1300e6f1bc46a","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/19-gorm/"},{"content":"1. 介绍 Go的标准包 encoding/json实现了json对象的编码和解码。 这篇文章主要讲的是结构体中嵌套匿名字段时的序列化和反序列化，因结","lvl0":"Go标准包(十八):encoding-json","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"e8d8043235c5a3b6364a00c38f1dd3b0","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/18-encoding-json/"},{"content":"1. 维基百科释义 RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿","lvl0":"Go标准包(二):crypto-rsa","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c2dc768ba03ea6ac5f364bbff5641047","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/17-crypto-rsa/"},{"content":"1.介绍 高级加密标准（英语：Advanced Encryption Standard，缩写：AES），又称Rijndael加密法（荷兰语发音：[ˈrɛindaːl","lvl0":"Go标准包(十六):crypto-aes","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"44bcc057335fc4b1942ba73a9e8fdb0a","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/16-crypto-aes/"},{"content":"1.介绍 os包中提供了操作系统函数的接口，是一个比较重要的包。它的作用主要是在服务器上进行系统的基本操作，如文件操作、目录操作、执行命令、信","lvl0":"Go标准包(十五):os","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"b0d1028f2074d3e54718df5f60e882a2","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/15-os/"},{"content":"1. 介绍 BigCache 是一个快速，支持并发访问，自淘汰的内存型缓存，可以在存储大量元素的同时依然保持高性能。BigCache将元素保存在堆上却避免了GC的","lvl0":"Go标准包(十四):bigCache","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"d26ce4d3a3143c4175b584dcd849efee","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/14-bigcache/"},{"content":"1.介绍 Zap是uber开源的日志库，支持日志级别分级 、结构化记录，对性能和内存分配做了极致的优化。目前 Star 12.8 源码地址: https://github.com/uber-go/zap 官方性能测试图 2.安","lvl0":"Go标准包(十三):zap","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"22dbb937d8edbb8960e5f0ca66ab78fa","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/13-zap/"},{"content":"1.介绍 unicode包提供了诸多处理rune字符相关功能的函数（比如区分字母和数字，或者是字母的大写和小写转换等) 2.判断函数 2.1 是否为空格","lvl0":"Go标准包(十二):unicode","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"8b6622259117d990a2c7f7d5c014fc7a","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/12-unicode/"},{"content":"1.介绍 sort包实现了四种基本排序算法：插入排序、归并排序、堆排序、快速排序。 但是这四种排序方法是不公开的，它们只能在 sort 包内部使用。sor","lvl0":"Go标准包(十一):sort","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"a9cb02b9aa84e6dc9c87e21b8226c1e7","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/11-sort/"},{"content":"1.介绍 Viper是适用于Go应用程序（包括Twelve-Factor App）的完整配置解决方案。它被设计用于在应用程序中工作，并且可以处理","lvl0":"Go标准包(十):viper","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"8320ed9e59339bda81747e03079b9566","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/10-viper/"},{"content":"1.介绍 在 Go中，如果要接收命令行参数，需要使用 flag包进行解析。不同的参数类型可以通过不同的方法接收。 2.参数接受 2.1 接受方式 使用flag","lvl0":"Go标准包(九):flag","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"50ea49d881bcf76873db86cee67a7621","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/9-flag/"},{"content":"1.介绍 sync包提供了互斥锁。除了Once和WaitGroup类型，其余多数适用于低水平的程序，多数情况下，高水平的同步使用channel","lvl0":"Go标准包(八):sync","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c7dfd03374264490237680bd1fbcfb25","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/8-sync/"},{"content":"1.什么是上下文? 从Go 1.7开始,标准库引入context(上下文)，他主要用来在goroutine之间传递上下文信息(同步信号、超时时间","lvl0":"Go标准包(七):context(上下文)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c1d8aa5fee03ca9d177f80456e28bfdd","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/7-context%E4%B8%8A%E4%B8%8B%E6%96%87/"},{"content":"1.介绍 bufio包实现了有缓冲的I/O。它包装一个io.Reader或io.Writer接口对象，使用这个包可以大幅提高文件读写的效率。 1","lvl0":"Go标准包(六):bufio(有缓冲的IO)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"517de1e8a0dc19f79cbead8f9553c588","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/6-bufio%E6%9C%89%E7%BC%93%E5%86%B2%E7%9A%84io/"},{"content":"1.介绍 在Go语言中，io包主要声明的是对I/O操作的基本接口，而io/ioutil包则实现了对应的方法，方便我们直接使用。 2.方法列表 方法","lvl0":"Go标准包(五):ioutil(IO操作函数集)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"719941b36d1367b57b9f059d83a35f4b","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/5-ioutilio%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0%E9%9B%86/"},{"content":"1.输出控制台 1.1 Printf Printf根据format参数生成格式化的字符串并写入标准输出。返回写入的字节数和遇到的任何错误。 1.format格式 动","lvl0":"Go标准包(四):fmt(格式化输出)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"6df6ae59c15a51a95e2e809364ef13c3","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/4-fmt%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"},{"content":"1.获取时间 1.1 当前时间 1 2 3 4 5 6 7 8 9 10 11 12 13 14 unix := time.Now().Unix() fmt.Printf(\u0026#34;当前时间戳(单位秒): %v \\n\u0026#34;,unix) nano := time.Now().UnixNano() fmt.Printf","lvl0":"Go标准包(三):time(时间包)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"923b4ac8cd8b868a0de71e15cd727411","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/3-time%E6%97%B6%E9%97%B4%E5%8C%85/"},{"content":"1.转换成其他类型（Parse类函数） 1.1 转换成整型(Atoi) 1.语法 1 func Atoi(s string) (int, error) 2.使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main()","lvl0":"Go标准包(二):strconv(字符串转换)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"9cf5c8183bf996ec623b91a065a2e9c4","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/2-strconv%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/"},{"content":"1.字符串查找 strings是Go内置的标准包,主要用于字符串查找、替换、比较等。常用方法如下: 1.1 方法列表 方法名 描述 Count(s, substr string)int 返回字符串s包含字","lvl0":"Go标准包(一):strings(字符串操作)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"8f73832a6a15fc4f26c7b655753a5af3","tags":["Go标准包"],"url":"https://shershon1991.github.io/post/%E6%A0%87%E5%87%86%E5%8C%85/1-strings%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"},{"content":"1. 什么是Gvm Go 语言版本管理器（Gvm）是管理 Go 语言环境的开源工具。Gvm 「pkgsets」 支持安装多个版本的 Go 并管理每个项目的模块。它最初","lvl0":"Go工具(一):gvm","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"ec2420ed03a6e42f342e563b42f86c7e","tags":["Go工具"],"url":"https://shershon1991.github.io/post/%E5%B7%A5%E5%85%B7%E7%AF%87/01-gvm/"},{"content":"1. 遍历字符串(string) 1.1 统计长度后遍历 1 2 3 4 5 6 7 8 func ForString() { str := \u0026#34;hello word\u0026#34; //1.统计长度后遍历 length := len(str) for i := 0; i \u0026lt; length; i++{ fmt.Printf(","lvl0":"Go实操(四):遍历使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"322ac40d55dbb911ade962a61cd7699b","tags":["Go实操"],"url":"https://shershon1991.github.io/post/%E5%AE%9E%E6%93%8D%E7%AF%87/4-%E9%81%8D%E5%8E%86%E4%BD%BF%E7%94%A8/"},{"content":"1.创建 1 countryMap = make(map[string]string) 2.插入 1 2 /* map 插入 key-value */ countryMap[\u0026#34;ShengRI\u0026#34;] = \u0026#34;1988-04-09\u0026#34; 3.取值 1 2 3 4 5 /* 使用 key 输出 map 值 */ for country := range countryMap { fmt.Println(\u0026#34;Capital of\u0026#34;,country,\u0026#34;is\u0026#34;,countryMap[country]) } 4.key是否存在 1 2 3 4 5 6 7 8 /* 查看","lvl0":"Go实操(三):Map使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"0ac9f3d7e93ef81b1f69fc57ec3a4426","tags":["Go实操"],"url":"https://shershon1991.github.io/post/%E5%AE%9E%E6%93%8D%E7%AF%87/3-map%E4%BD%BF%E7%94%A8/"},{"content":"1.获取当前时间戳 1 fmt.Println(time.Now().Unix()) //1561713322 2.格式化时间 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fmt.Println(\u0026#34;时间:\u0026#34;,time.Now().","lvl0":"Go实操(二):时间处理","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"715b72f2e61a3d9e63045a10781e65ef","tags":["Go实操"],"url":"https://shershon1991.github.io/post/%E5%AE%9E%E6%93%8D%E7%AF%87/2-%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"},{"content":"在GO中字符串是用双引号(\u0026quot;\u0026quot;)或反引号(``)括起来，而且字符串不可变 1 字符串操作 1.1 修改字符串 直接修改字符串报错,如下","lvl0":"Go实操(一):字符串操作","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"4c026839bf9e7951c93359db9efaab42","tags":["Go实操"],"url":"https://shershon1991.github.io/post/%E5%AE%9E%E6%93%8D%E7%AF%87/1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"},{"content":"1.介绍 Go语言实现了反射，所谓反射就是动态运行时的状态。我们一般用到的包是reflect包，reflect 实现了运行时的反射能力，能够让程","lvl0":"Go学习(二十七):反射使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c59ee437fc87d623f2b3490bbf3a6ddd","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/27-%E5%8F%8D%E5%B0%84%E4%BD%BF%E7%94%A8/"},{"content":"1.生成Md5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( \u0026#34;crypto/md5\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; ) func main() { str := \u0026#34;Hello Word\u0026#34; // 方法一 sum := md5.Sum([]byte(str)) // 转成16进制 md51 := fmt.Sprintf(\u0026#34;%x\u0026#34;, sum)","lvl0":"Go学习(二十六):Md5-Sha1-Base64","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"abb91380dc251bbfa105a8a3c6d65abe","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/26-md5-sha1-base64/"},{"content":"1.介绍 Go官方提供了database包，database包下有sql/driver。该包用来定义操作数据库的接口，这保证了无论使用哪种数据","lvl0":"Go学习(二十五):操作数据库-MYSQL","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"ab3f583dd667930ab1535f1e6a892708","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/25-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93-mysql/"},{"content":"1.介绍 在Go语言中，文件操作的大多数函数都在os包里面，文件的信息包括文件名、文件大小、修改权限、修改时间等。 1.1 文件接口属性(FileIn","lvl0":"Go学习(二十四):文件操作","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"ac38bb116d61b51de525ecbfa981b613","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/24-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"},{"content":"1.Map转JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) func main() { // map里面 map1 := map[string]string { \u0026#34;n","lvl0":"Go学习(二十三):JSON使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c87c629bc874861e8932c12948d41b26","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/23-json%E4%BD%BF%E7%94%A8/"},{"content":"1.怎么实现HTTP协议客户端? Go语言标准库内置了net/http包，涵盖了HTTP客户端和服务端具体的实现方式。内置的net/http包","lvl0":"Go学习(二十二):Web开发-HTTP客户端的实现","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"f49df6e7d7f9a5961e4a64f7b693669b","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/22-web%E5%BC%80%E5%8F%91-http%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%AE%9E%E7%8E%B0/"},{"content":"1.获取GET参数 1.1 方法列表 方法名 描述 (r *Request) ParseForm() error 判断是否解析传参时出错 (r *Request) FormValue(key string) string 接收指定key的参数值 1.2 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","lvl0":"Go学习(二十一):Web开发-HTTP服务端接收参数的几种方式","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"9eed0d899d8ddd49e6a2c7e9b8a8e42d","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/21-web%E5%BC%80%E5%8F%91-http%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"},{"content":"1. 怎么启动Web服务？ Go语言标准库内置的net/http包，可以实现HTTP服务端。实现HTTP服务端就是能够启动Web服务，相当于搭建起","lvl0":"Go学习(二十):Web开发-HTTP服务端启动的几种方式","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"906b767209db75b6d8a8f71bfee7fade","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/20-web%E5%BC%80%E5%8F%91-http%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%AF%E5%8A%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"},{"content":"1.介绍 sync包提供了互斥锁。除了Once和WaitGroup类型，其余多数适用于低水平的程序，多数情况下，高水平的同步使用channel","lvl0":"Go学习(十九):并发编程-sync包","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"13d3bf80856cb43b25029bc0cf6c58f0","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/19-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-sync%E5%8C%85/"},{"content":"1.什么是select？ select语句的机制有点像switch语句，不同的是，select会随机挑选一个可通信的case来执行，如果所有c","lvl0":"Go学习(十八):并发编程-select和通道","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"1ce73fb181ad0dc030ad8d7e7ccf0465","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/18-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-select%E5%92%8C%E9%80%9A%E9%81%93/"},{"content":"1.什么是Channel? channel即Go的通道，是协程之间的通信机制。一个channel是一条通信管道，它可以让一个协程通过它给另一个","lvl0":"Go学习(十七):并发编程-通道","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"9a74556bf5b42788ff4751e9407dcd5c","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/17-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E9%80%9A%E9%81%93/"},{"content":"1.什么是协程? 协程又称为微线程，是一种比线程更加轻量级的存在。正如一个进程可以拥有多个线程，一个线程也可以拥有多个协程。 协程是编译器级的，","lvl0":"Go学习(十六):并发编程-协程","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"6d34e0864e625b2f2a25d94f089ebaaa","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/16-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%8D%8F%E7%A8%8B/"},{"content":"1.介绍 错误是指程序中出现不正常的情况，从而导致程序无法正常运行。Go语言中没有try...catch来捕获错误，而是通过defer+rec","lvl0":"Go学习(十五):异常处理","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"f028f2f7fde33da876f20447cb5ddb42","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/15-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"},{"content":"虽然Go语言没有继承和多态，但是Go语言可以通过匿名字段实现继承，通过接口实现多态。 1.介绍 1.1 概念 在Go语言中，接口是一组方法签名。接口指定","lvl0":"Go学习(十四):面向对象-接口(interface)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c5a5949c4fd5f89e146ff0c6c07e170c","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%8E%A5%E5%8F%A3/"},{"content":"Go没有沿袭传统面向对象编程中的诸多概念，也没有提供类(class)，但是它提供了结构体(struct)，方法(method)可以在结构体上","lvl0":"Go学习(十三):面向对象-方法(method)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"df65f6370b9061ce6c7aeccf0df05e9a","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/12-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B-%E7%BB%93%E6%9E%84%E4%BD%93/"},{"content":"1.定义 map是一种集合，可以像遍历数组或切片那样去遍历它。因为map是由Hash表实现的，所以对map的读取顺序不固定。 1.1 注意事项 map是","lvl0":"Go学习(十一):映射(map)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"2a1a4b6d11fe9f518b3fa744fe9f3fa7","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/11-%E6%98%A0%E5%B0%84map/"},{"content":"1.切片的概念 Go语言中数组的长度不可改变，但在很多应用场景中，在初始定义数组时，数组的长度并不可预知，这样的序列集合无法满足要求。Go中提","lvl0":"Go学习(十):切片(slice)","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"49521dda995eb6f077d78c31668358bc","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/10-%E5%88%87%E7%89%87/"},{"content":"1.数组的概念 数组是相同类型的一组数据构成的长度固定的序列，其中数据类型包含了基本数据类型、复合数据类型和自定义类型。因为数组的内存是一段连","lvl0":"Go学习(九):数组使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"0d16812b94b8abc6a20d0fde4ef9dd14","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/9-%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8/"},{"content":"1.什么是指针？ 指针是存储另一个变量的内存地址的变量。变量是一种使用方便的占位符，变量都指向计算机的内存地址。一个指针变量可以指向任何一个值","lvl0":"Go学习(八):指针","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"fb8f8b098317ec504d66ef2bfa999895","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/8-%E6%8C%87%E9%92%88/"},{"content":"1. 什么是闭包 闭包是由函数和与其相关的引用环境组合而成的实体在实现深约束时，需要创建一个能显式表示引用环境的东西，并将它与相关的子程序捆绑在一","lvl0":"Go学习(七):闭包使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"e5011ddbc14d774c29e132acb73ea969","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/7-%E9%97%AD%E5%8C%85/"},{"content":"1.函数申明 1.1 声明语法 1 2 3 4 5 func funcName( param type ) (output1 type1, output2 type2) { //这里是处理逻辑代码 //返回多个值 return value1, value2 } 1.2 语法解析 func: 函数关键字, funcName: 指函数名，在同一个","lvl0":"Go学习(六):函数使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"c6c900e4508afd1fdff19257622fd58a","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/6-%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/"},{"content":"1.条件判断(if) 1.1 if 1.语法结构 1 2 3 if 布尔表达式 { // 布尔表达式为true时执行 } 2. 使用 1 2 3 4 a := 10 if a \u0026gt; 3{ fmt.Println(\u0026#34;a \u0026gt; 3 为true\u0026#34;","lvl0":"Go学习(五):流程控制","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"40e5ae980c04358a6c2b38a03c1b2c10","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/5-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"content":"1.类型介绍 在Go语言中，有基本数据类型（原生数据类型）和复合数据类型（派生数据类型）。 2.值类型 2.1 整型 整型分两大类： 有符号整型：int8、","lvl0":"Go学习(四):数据类型","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"e02e003202441e82947631f430edc190","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/4-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"content":"1.变量分类 变量的本质是计算机分配的一小块内存，专门用于存放指定数据，在程序运行过程中该数值可以发生改变；当程序运行结束，存放该数据的内存就","lvl0":"Go学习(三):变量使用","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"72316ffa5a892e588f5bdc42999e19c0","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/3-%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/"},{"content":"1. 程序示例 以实际代码进行讲解: 1 2 3 4 5 6 7 8 9 10 11 12 package main // 这是引入包 import \u0026#34;fmt\u0026#34; // 入口函数 func main() { // 定义变量 str := \u0026#34;hello word\u0026#34; // 输出语句 fmt.Println(str) } 2. 程序组成 2.1 包名:","lvl0":"Go学习(二):程序组成结构及规范说明","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"a1c07fc6a4f9622d8c13a74e40c1e62d","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/2-%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"},{"content":"1.安装 下载地址（https://golang.org/dl/） 下载之后，双击安装； 2.验证 2.1 查看版本 1 2 3 # 查看版本 ➜ ~ go version go version go1.15.5 darwin/amd64 2.2 查看","lvl0":"Go学习(一):Mac环境下安装配置","lvl1":["编程","Go"],"lvl2":"摘要","objectID":"692828cffc786ed56e4b9cced60d604b","tags":["Go基础"],"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/1-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"content":"Go没有沿袭传统面向对象编程中的诸多概念，也没有提供类(class)，但是它提供了结构体(struct)，方法(method)可以在结构体上","lvl0":"","lvl1":null,"lvl2":"摘要","objectID":"b775c91003f4fbc224bf80eb89da0681","tags":null,"url":"https://shershon1991.github.io/post/%E5%9F%BA%E7%A1%80%E7%AF%87/13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B-%E6%96%B9%E6%B3%95/"}]